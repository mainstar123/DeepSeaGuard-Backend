version: '3.8'

services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-streaming

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-streaming

  # Kafka for Analytics
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - deepseaguard-streaming

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-streaming

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=deepseaguard
      - POSTGRES_USER=deepseaguard
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U deepseaguard"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-streaming

  # Bytewax Telemetry Processor
  bytewax-telemetry:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "-m", "bytewax.run", "src/streaming/telemetry_processor.py"]
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=INFO
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Bytewax Geofencing Processor
  bytewax-geofencing:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "-m", "bytewax.run", "src/streaming/geofencing_processor.py"]
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
      - LOG_LEVEL=INFO
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Bytewax Compliance Processor
  bytewax-compliance:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "-m", "bytewax.run", "src/streaming/compliance_processor.py"]
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
      - LOG_LEVEL=INFO
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # AUV Telemetry Microservice
  auv-telemetry-service:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["uvicorn", "src.microservices.auv_telemetry_service:app", "--host", "0.0.0.0", "--port", "8001"]
    ports:
      - "8001:8001"
    environment:
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Geofencing Microservice
  geofencing-service:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["uvicorn", "src.microservices.geofencing_service:app", "--host", "0.0.0.0", "--port", "8002"]
    ports:
      - "8002:8002"
    environment:
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Compliance Microservice
  compliance-service:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["uvicorn", "src.microservices.compliance_service:app", "--host", "0.0.0.0", "--port", "8003"]
    ports:
      - "8003:8003"
    environment:
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - POSTGRES_HOST=postgres
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Alert Service
  alert-service:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["uvicorn", "src.microservices.alert_service:app", "--host", "0.0.0.0", "--port", "8004"]
    ports:
      - "8004:8004"
    environment:
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # API Gateway
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-streaming.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - auv-telemetry-service
      - geofencing-service
      - compliance-service
      - alert-service
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-streaming.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

  # Kafka UI (Optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    restart: unless-stopped
    networks:
      - deepseaguard-streaming

volumes:
  rabbitmq_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  deepseaguard-streaming:
    driver: bridge 