version: '3.8'

services:
  # API Gateway (Port 8000)
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - redis
      - rabbitmq
      - kafka
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # AUV Telemetry Microservice (Port 8001)
  auv-telemetry:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "src/microservices/auv_telemetry_service.py"]
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://deepseaguard:password@postgres:5432/deepseaguard
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # Geofencing Microservice (Port 8002)
  geofencing:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "src/microservices/geofencing_service.py"]
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://deepseaguard:password@postgres:5432/deepseaguard
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # Compliance Microservice (Port 8003)
  compliance:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "src/microservices/compliance_service.py"]
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://deepseaguard:password@postgres:5432/deepseaguard
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # Alert Management Microservice (Port 8004)
  alert:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "src/microservices/alert_service.py"]
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://deepseaguard:password@postgres:5432/deepseaguard
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # Streaming Manager (Port 8005)
  streaming-manager:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "src/streaming/streaming_manager.py"]
    ports:
      - "8005:8005"
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - redis
      - rabbitmq
      - kafka
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-microservices

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-microservices

  # Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - deepseaguard-microservices

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-microservices

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=deepseaguard
      - POSTGRES_USER=deepseaguard
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U deepseaguard"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deepseaguard-microservices

  # Bytewax Telemetry Processor
  bytewax-telemetry:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "-m", "bytewax.run", "src/streaming/telemetry_processor.py"]
    environment:
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # Bytewax Geofencing Processor
  bytewax-geofencing:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "-m", "bytewax.run", "src/streaming/geofencing_processor.py"]
    environment:
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # Bytewax Compliance Processor
  bytewax-compliance:
    build:
      context: .
      dockerfile: Dockerfile.streaming
    command: ["python", "-m", "bytewax.run", "src/streaming/compliance_processor.py"]
    environment:
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    networks:
      - deepseaguard-microservices
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - deepseaguard-microservices

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - deepseaguard-microservices

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - deepseaguard-microservices

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  deepseaguard-microservices:
    driver: bridge 